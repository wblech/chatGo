// Code generated by MockGen. DO NOT EDIT.
// Source: sql.go

// Package repositoryMessage is a generated GoMock package.
package repositoryMessage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCreator is a mock of Creator interface.
type MockCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCreatorMockRecorder
}

// MockCreatorMockRecorder is the mock recorder for MockCreator.
type MockCreatorMockRecorder struct {
	mock *MockCreator
}

// NewMockCreator creates a new mock instance.
func NewMockCreator(ctrl *gomock.Controller) *MockCreator {
	mock := &MockCreator{ctrl: ctrl}
	mock.recorder = &MockCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreator) EXPECT() *MockCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreator) Create(message *MessageModel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", message)
}

// Create indicates an expected call of Create.
func (mr *MockCreatorMockRecorder) Create(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreator)(nil).Create), message)
}

// MockGetter is a mock of Getter interface.
type MockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGetterMockRecorder
}

// MockGetterMockRecorder is the mock recorder for MockGetter.
type MockGetterMockRecorder struct {
	mock *MockGetter
}

// NewMockGetter creates a new mock instance.
func NewMockGetter(ctrl *gomock.Controller) *MockGetter {
	mock := &MockGetter{ctrl: ctrl}
	mock.recorder = &MockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetter) EXPECT() *MockGetterMockRecorder {
	return m.recorder
}

// GetWithLimit mocks base method.
func (m *MockGetter) GetWithLimit(models *[]MessageModel, limit int) *[]MessageModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithLimit", models, limit)
	ret0, _ := ret[0].(*[]MessageModel)
	return ret0
}

// GetWithLimit indicates an expected call of GetWithLimit.
func (mr *MockGetterMockRecorder) GetWithLimit(models, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithLimit", reflect.TypeOf((*MockGetter)(nil).GetWithLimit), models, limit)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(message *MessageModel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", message)
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), message)
}

// GetWithLimit mocks base method.
func (m *MockRepository) GetWithLimit(models *[]MessageModel, limit int) *[]MessageModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithLimit", models, limit)
	ret0, _ := ret[0].(*[]MessageModel)
	return ret0
}

// GetWithLimit indicates an expected call of GetWithLimit.
func (mr *MockRepositoryMockRecorder) GetWithLimit(models, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithLimit", reflect.TypeOf((*MockRepository)(nil).GetWithLimit), models, limit)
}
